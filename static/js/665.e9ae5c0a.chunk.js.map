{"version":3,"file":"static/js/665.e9ae5c0a.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styles.jsx","components/sharedStyles.styles.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form,  ErrorMessage } from 'formik';\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 20px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessageContainer = styled(ErrorMessage)`\n  color: red;\n  word-break: 'break-all';\n  max-width: 300px;\n  justify-content: center;\n`;\n\n","import styled from 'styled-components';\nimport { Form, ErrorMessage } from 'formik';\n\nexport const StyledRegister = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n  margin-top: 70px;\n  `;\n\nexport const FormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ErrorMessageContainer = styled(ErrorMessage)`\n  color: red;\n`;\n","import { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport { Formik, Field } from 'formik';\nimport { Button, TextField } from '@mui/material';\nimport * as yup from 'yup';\nimport {\n  FormContainer,\n  FormLabel,\n  ErrorMessageContainer,\n} from './RegisterForm.styles';\n\nconst validationSchema = yup.object({\n  name: yup.string().required('Required'),\n  email: yup.string().required('Required').email('Invalid email address'),\n  password: yup\n    .string()\n    .required('Required')\n    .min(8, 'Password must be at least 8 characters long')\n    .matches(\n      /^(?=.*[A-Z])(?=.*[@#$%^&+=]).*$/,\n      'Password must contain at least one uppercase letter and one special character'\n    ),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n    dispatch(register({ name, email, password }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <FormContainer>\n          <FormLabel>\n            UserName\n            <Field\n              as={TextField}\n              type=\"text\"\n              name=\"name\"\n              sx={{ width: '300px' }}\n            />\n            <ErrorMessageContainer name=\"name\" component=\"div\" />\n          </FormLabel>\n          <FormLabel>\n            Email\n            <Field\n              as={TextField}\n              type=\"email\"\n              name=\"email\"\n              sx={{ width: '300px' }}\n            />\n            <ErrorMessageContainer name=\"email\" component=\"div\" />\n          </FormLabel>\n          <FormLabel>\n            Password\n            <Field\n              as={TextField}\n              type=\"password\"\n              name=\"password\"\n              sx={{ width: '300px'}}\n            />\n            <ErrorMessageContainer name=\"password\" component=\"div\" />\n          </FormLabel>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            disabled={isSubmitting}\n          >\n            Register\n          </Button>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Typography } from '@mui/material';\nimport { StyledRegister } from 'components/sharedStyles.styles';\n\nconst Register = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <StyledRegister>\n        <Typography variant=\"h4\">Registration</Typography>\n        <RegisterForm />\n      </StyledRegister>\n    </>\n  );\n};\n\nexport default Register;\n"],"names":["FormContainer","styled","Form","_templateObject","_taggedTemplateLiteral","FormLabel","_templateObject2","ErrorMessageContainer","ErrorMessage","_templateObject3","StyledRegister","_templateObject4","validationSchema","yup","name","required","email","password","min","matches","RegisterForm","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","values","_ref","resetForm","register","children","_ref2","isSubmitting","_jsxs","Field","as","TextField","type","sx","width","component","Button","variant","color","disabled","_Fragment","Helmet","Typography"],"sourceRoot":""}